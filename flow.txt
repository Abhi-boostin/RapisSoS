# RapidSoS API Documentation

## Base URL
Local: http://localhost:4000/api
Production: [Your Production URL]/api

## Authentication Flow

### 1. Send OTP
#### Users
POST /users/sendotp
```json
Request:
{
    "phone": "+919876543210"  // Must include +91 prefix
}

Response:
{
    "success": true,
    "message": "OTP sent successfully"
}
```

#### Officers
POST /officers/sendotp
```json
Request: Same as users
Response: Same as users
```

#### Ambulances
POST /ambulances/sendotp
```json
Request: Same as users
Response: Same as users
```

### 2. Verify OTP
#### Users
POST /users/verifyotp
```json
Request:
{
    "phone": "+919876543210",
    "code": "123456"  // 6-digit OTP
}

Response:
{
    "success": true,
    "message": "OTP verified successfully",
    "user": {
        "phone": "+919876543210",
        "phoneVerified": true,
        "name": { ... },
        "id": "user_id_here"
    }
}
```

#### Officers
POST /officers/verifyotp
```json
Request: Same as users

Response:
{
    "success": true,
    "message": "OTP verified successfully",
    "officer": {
        "phone": "+919876543210",
        "phoneVerified": true,
        "badgeNumber": "...",
        "department": "...",
        "id": "officer_id_here"
    }
}
```

#### Ambulances
POST /ambulances/verifyotp
```json
Request: Same as users

Response:
{
    "success": true,
    "message": "OTP verified successfully",
    "ambulance": {
        "phone": "+919876543210",
        "phoneVerified": true,
        "vehicleNumber": "...",
        "type": "...",
        "id": "ambulance_id_here"
    }
}
```

## Profile Management

### Update User Profile
POST /users/update
```json
Request:
{
    "phone": "+919876543210",
    "name": {
        "first": "John",
        "middle": "K",
        "last": "Doe"
    },
    "dob": "2000-01-01",
    "bloodGroup": "O+",
    "allergies": ["Penicillin"],
    "medicalConditions": ["Asthma"],
    "medications": ["Ventolin"],
    "emergencyContacts": [{
        "name": "Jane Doe",
        "relationship": "Sister",
        "phone": "+919876543211"
    }]
}

Response:
{
    "success": true,
    "user": {
        // Updated user object
    }
}
```

### Update Officer Profile
POST /officers/update
```json
Request:
{
    "phone": "+919876543210",
    "badgeNumber": "PO123456",
    "fullName": "Officer John Smith",
    "department": "Traffic Police",
    "location": {
        "type": "Point",
        "coordinates": [77.5946, 12.9716]  // [longitude, latitude]
    }
}

Response:
{
    "success": true,
    "officer": {
        // Updated officer object
    }
}
```

### Update Ambulance Profile
POST /ambulances/update
```json
Request:
{
    "phone": "+919876543210",
    "vehicleNumber": "KA01AB1234",
    "type": "BLS",  // BLS, ALS, or ICU
    "crew": {
        "driverName": "John",
        "paramedicName": "Smith",
        "contactPhone": "+919876543212"
    },
    "location": {
        "type": "Point",
        "coordinates": [77.5946, 12.9716]
    }
}

Response:
{
    "success": true,
    "ambulance": {
        // Updated ambulance object
    }
}
```

## Emergency Services

### Request Police
POST /users/sos/officer
```json
Request:
{
    "phone": "+919876543210",
    "location": {
        "type": "Point",
        "coordinates": [77.5946, 12.9716]
    }
}

Response:
{
    "success": true,
    "requestId": "request_id_here",
    "officer": {
        "badgeNumber": "PO123456",
        "department": "Traffic Police",
        "phone": "+919876543213",
        "distance": "1.5",  // in kilometers
        "estimatedMinutes": 5
    }
}
```

### Request Ambulance
POST /users/sos/ambulance
```json
Request:
{
    "phone": "+919876543210",
    "location": {
        "type": "Point",
        "coordinates": [77.5946, 12.9716]
    }
}

Response:
{
    "success": true,
    "requestId": "request_id_here",
    "ambulance": {
        "unitId": "AMB123",
        "vehicleNumber": "KA01AB1234",
        "crew": {
            "driverName": "John",
            "paramedicName": "Smith"
        },
        "phone": "+919876543214",
        "distance": "2.1",
        "estimatedMinutes": 7
    }
}
```

## Responder Actions

### Update Status (Officers/Ambulances)
POST /officers/status or /ambulances/status
```json
Request:
{
    "phone": "+919876543210",
    "status": "available"  // "available" or "off"
}

Response:
{
    "success": true,
    "status": "available"
}
```

### Get Active Requests
GET /officers/requests?phone=+919876543210 or
GET /ambulances/requests?phone=+919876543210
```json
Response:
{
    "success": true,
    "requests": [{
        "id": "request_id_here",
        "userLocation": {
            "type": "Point",
            "coordinates": [77.5946, 12.9716]
        },
        "mapsUrl": "https://www.google.com/maps?q=12.9716,77.5946",
        "distanceMeters": 1500,
        "secondsRemaining": 240,  // Time left to accept/decline
        "status": "pending",
        "user": {
            "name": {
                "first": "John",
                "middle": "K",
                "last": "Doe"
            },
            "phone": "+919876543210",
            "bloodGroup": "O+",
            "allergies": ["Penicillin"],
            "medicalConditions": ["Asthma"],
            "medications": ["Ventolin"],
            "specialNeeds": ["Wheelchair Access"],
            "emergencyContacts": [{
                "name": "Jane Doe",
                "relationship": "Sister",
                "phone": "+919876543211",
                "email": "jane@example.com"
            }]
        }
    }]
}
```

### Accept Request
POST /officers/requests/:id/accept or
POST /ambulances/requests/:id/accept
```json
Request:
{
    "officerPhone": "+919876543210"  // or "ambulancePhone" for ambulances
}

Response:
{
    "success": true,
    "message": "Request accepted",
    "userLocation": {
        "type": "Point",
        "coordinates": [77.5946, 12.9716]
    },
    "mapsUrl": "https://www.google.com/maps?q=12.9716,77.5946",
    "user": {
        "name": {
            "first": "John",
            "middle": "K",
            "last": "Doe"
        },
        "phone": "+919876543210",
        "bloodGroup": "O+",
        "allergies": ["Penicillin"],
        "medicalConditions": ["Asthma"],
        "medications": ["Ventolin"],
        "specialNeeds": ["Wheelchair Access"],
        "emergencyContacts": [{
            "name": "Jane Doe",
            "relationship": "Sister",
            "phone": "+919876543211",
            "email": "jane@example.com"
        }]
    }
}
```

### Decline Request
POST /officers/requests/:id/decline or
POST /ambulances/requests/:id/decline
```json
Request:
{
    "officerPhone": "+919876543210"  // or "ambulancePhone" for ambulances
}

Response:
{
    "success": true,
    "message": "Request declined",
    "nextResponder": {
        // Info about next assigned responder
        "distance": "2.5",
        "estimatedMinutes": 8
    }
}
```

## Error Responses
All endpoints return this structure for errors:
```json
{
    "success": false,
    "message": "Error description here"
}
```

Common HTTP Status Codes:
- 200: Success
- 400: Bad Request (invalid input)
- 401: Unauthorized
- 404: Not Found
- 500: Server Error

## Important Notes:
1. All phone numbers must include +91 prefix
2. Locations must be in [longitude, latitude] format
3. OTP expires in 10 minutes
4. Emergency requests expire in 5 minutes if not accepted
5. Maps URLs are provided for navigation
6. Distances are in kilometers/meters as specified
7. ETA is calculated based on distance and traffic

## Frontend Implementation Guidelines

### Local Storage Best Practices
1. Store the following in localStorage:
   - User/Officer/Ambulance phone number
   - Authentication status
   - Profile type (user/officer/ambulance)

2. DO NOT store in localStorage:
   - OTP codes
   - Sensitive medical information
   - Full user/responder profiles
   - Active request details

### Data Handling
1. Always format phone numbers with +91 prefix before API calls
2. Cache user location for faster SOS requests
3. Implement retry logic for failed API calls
4. Keep request status in memory while active
5. Clear sensitive data on logout

### Critical Requirements
1. Poll active requests every 30 seconds
2. Set up location permissions early
3. Keep device awake during active emergencies
4. Handle offline scenarios gracefully
5. Implement proper error handling for all API calls

### Security Considerations
1. Never log sensitive medical information
2. Clear all storage on logout
3. Validate coordinates before sending
4. Implement session timeout
5. Use HTTPS for all API calls

### User Information Display
1. Always show critical medical info prominently
2. Format phone numbers consistently
3. Sort emergency contacts by relationship
4. Display coordinates in human-readable format
5. Show distance in appropriate units (m/km)

### Performance Tips
1. Cache responder location updates
2. Implement progressive loading for lists
3. Optimize map marker updates
4. Use local state for rapid updates
5. Implement proper cleanup on component unmount

Remember: User safety and data privacy are paramount. Always handle medical information and emergency contacts with utmost care and follow all security best practices.
    